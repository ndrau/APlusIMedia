import type { PortfolioItem, Video } from '@/types/video'

// Helper functions for column and image sizing
export const getColumnWidth = (item: PortfolioItem): number => {
  if (item.type === 'video') {
    const video = item.content as Video
    // Return 7 for horizontal videos, 5 for vertical videos
    return video.aspectRatio === 'vertical' ? 5 : 7
  } else if (item.type === 'service') {
    const service = item.content as any
    // Return 7 for horizontal services, 5 for vertical services
    return service.aspectRatio === 'vertical' ? 5 : 7
  }
  // Default fallback
  return 7
}

export const getImageWidth = (video: Video): number => {
  // Return appropriate width based on aspect ratio
  return video.aspectRatio === 'vertical' ? 1440 : 2560
}

export const getImageHeight = (video: Video): number => {
  // Return appropriate height based on aspect ratio
  return video.aspectRatio === 'vertical' ? 1920 : 1707
}

export const getAltText = (video: Video): string => {
  return video.title ? `${video.title} â€“ Preview image` : 'Portfolio video preview image'
}

export const getSrcSet = (video: Video): string => {
  const base = video.posterImage.replace(/\.(png|jpg|jpeg)$/i, '')
  const widths = [480, 960, 1440, 1920]
  // Prefer webp variants generated by script, but include original as last resort
  const webpCandidates = widths.map(w => `${base}-${w}.webp ${w}w`)
  const fallback = `${video.posterImage} ${getImageWidth(video)}w`
  return [...webpCandidates, fallback].join(', ')
}
